/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __BASIC_KERN_SKEL_H__
#define __BASIC_KERN_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct basic_kern {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *packetdrop;
	} progs;
	struct {
		struct bpf_link *packetdrop;
	} links;

#ifdef __cplusplus
	static inline struct basic_kern *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct basic_kern *open_and_load();
	static inline int load(struct basic_kern *skel);
	static inline int attach(struct basic_kern *skel);
	static inline void detach(struct basic_kern *skel);
	static inline void destroy(struct basic_kern *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
basic_kern__destroy(struct basic_kern *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
basic_kern__create_skeleton(struct basic_kern *obj);

static inline struct basic_kern *
basic_kern__open_opts(const struct bpf_object_open_opts *opts)
{
	struct basic_kern *obj;
	int err;

	obj = (struct basic_kern *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = basic_kern__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	basic_kern__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct basic_kern *
basic_kern__open(void)
{
	return basic_kern__open_opts(NULL);
}

static inline int
basic_kern__load(struct basic_kern *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct basic_kern *
basic_kern__open_and_load(void)
{
	struct basic_kern *obj;
	int err;

	obj = basic_kern__open();
	if (!obj)
		return NULL;
	err = basic_kern__load(obj);
	if (err) {
		basic_kern__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
basic_kern__attach(struct basic_kern *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
basic_kern__detach(struct basic_kern *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *basic_kern__elf_bytes(size_t *sz);

static inline int
basic_kern__create_skeleton(struct basic_kern *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "basic_kern";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "basic_ke.rodata";
	s->maps[0].map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "packetdrop";
	s->progs[0].prog = &obj->progs.packetdrop;
	s->progs[0].link = &obj->links.packetdrop;

	s->data = basic_kern__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *basic_kern__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe0\x04\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x0a\0\0\0\x85\0\0\0\x06\
\0\0\0\xb7\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\x68\x65\x6c\x6c\x6f\x20\x78\x64\
\x70\0\x47\x50\x4c\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x58\x01\0\0\x58\x01\0\
\0\x23\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\x01\0\0\0\x06\0\0\x04\x18\0\0\0\x08\
\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\0\x20\0\0\0\x16\0\0\0\x03\0\0\0\x40\
\0\0\0\x20\0\0\0\x03\0\0\0\x60\0\0\0\x30\0\0\0\x03\0\0\0\x80\0\0\0\x3f\0\0\0\
\x03\0\0\0\xa0\0\0\0\x4e\0\0\0\0\0\0\x08\x04\0\0\0\x54\0\0\0\0\0\0\x01\x04\0\0\
\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\x61\0\0\0\x01\0\0\0\x65\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\x01\x69\0\0\0\x01\0\0\x0c\x05\0\0\0\0\0\0\0\0\0\0\x0a\
\x09\0\0\0\xde\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\
\x08\0\0\0\x0b\0\0\0\x0a\0\0\0\xe3\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xf7\0\0\
\0\0\0\0\x0e\x0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x09\0\0\0\x0b\0\0\0\
\x04\0\0\0\x0a\x01\0\0\0\0\0\x0e\x0d\0\0\0\x01\0\0\0\x13\x01\0\0\x01\0\0\x0f\0\
\0\0\0\x0c\0\0\0\0\0\0\0\x0a\0\0\0\x1b\x01\0\0\x01\0\0\x0f\0\0\0\0\x0e\0\0\0\0\
\0\0\0\x04\0\0\0\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\x61\
\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\x65\
\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\x5f\
\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\
\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\
\x74\x78\0\x69\x6e\x74\0\x70\x61\x63\x6b\x65\x74\x64\x72\x6f\x70\0\x78\x64\x70\
\0\x2f\x68\x6f\x6d\x65\x2f\x6d\x79\x63\x72\x6f\x66\x74\x2f\x64\x65\x76\x2f\x65\
\x62\x70\x66\x2d\x73\x61\x6d\x70\x6c\x65\x73\x2f\x62\x61\x73\x69\x63\x2d\x63\
\x2f\x62\x61\x73\x69\x63\x5f\x6b\x65\x72\x6e\x2e\x63\0\x20\x20\x20\x20\x62\x70\
\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x68\x65\x6c\x6c\x6f\x20\x78\x64\x70\
\x22\x29\x3b\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x58\x44\x50\x5f\x50\
\x41\x53\x53\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\
\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x70\x61\x63\x6b\x65\x74\x64\x72\x6f\x70\
\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\x72\
\x6f\x64\x61\x74\x61\0\x6c\x69\x63\x65\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\
\0\0\0\0\x14\0\0\0\x14\0\0\0\x2c\0\0\0\x40\0\0\0\0\0\0\0\x08\0\0\0\x74\0\0\0\
\x01\0\0\0\0\0\0\0\x07\0\0\0\x10\0\0\0\x74\0\0\0\x02\0\0\0\0\0\0\0\x78\0\0\0\
\xac\0\0\0\x05\x38\0\0\x20\0\0\0\x78\0\0\0\xc9\0\0\0\x05\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\x05\0\0\0\0\0\0\0\0\0\x0a\0\0\0\0\0\0\0\0\0\0\
\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x27\0\0\0\x12\0\x03\0\0\0\0\0\0\
\0\0\0\x30\0\0\0\0\0\0\0\x48\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x50\x01\0\0\0\0\0\0\x03\0\0\0\x03\0\0\0\
\x68\x01\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\x40\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\
\x0c\x03\x0d\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\
\x78\x74\0\x70\x61\x63\x6b\x65\x74\x64\x72\x6f\x70\x2e\x5f\x5f\x5f\x5f\x66\x6d\
\x74\0\x70\x61\x63\x6b\x65\x74\x64\x72\x6f\x70\0\x2e\x72\x65\x6c\x78\x64\x70\0\
\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\
\x73\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\
\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x51\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x6b\x04\0\0\0\0\0\0\x72\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x36\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x30\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x04\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x0c\0\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x61\0\0\0\x01\0\0\0\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x0a\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x49\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x7a\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x6d\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x80\0\0\0\0\0\0\0\x93\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x69\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x04\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x0c\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x03\0\0\0\0\0\0\x60\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\x04\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x0c\0\0\0\x09\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x3a\0\0\0\x03\x4c\xff\
\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x68\x04\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x59\0\0\0\x02\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x78\x03\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\
\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct basic_kern *basic_kern::open(const struct bpf_object_open_opts *opts) { return basic_kern__open_opts(opts); }
struct basic_kern *basic_kern::open_and_load() { return basic_kern__open_and_load(); }
int basic_kern::load(struct basic_kern *skel) { return basic_kern__load(skel); }
int basic_kern::attach(struct basic_kern *skel) { return basic_kern__attach(skel); }
void basic_kern::detach(struct basic_kern *skel) { basic_kern__detach(skel); }
void basic_kern::destroy(struct basic_kern *skel) { basic_kern__destroy(skel); }
const void *basic_kern::elf_bytes(size_t *sz) { return basic_kern__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
basic_kern__assert(struct basic_kern *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __BASIC_KERN_SKEL_H__ */
